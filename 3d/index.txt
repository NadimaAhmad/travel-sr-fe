<!DOCTYPE html>
<html lang="id">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Sutan Raya - Face Tracker Experiment</title>

    <meta property="og:title" content="Sutan Raya - Tur Virtual Armada Mewah" />
    <meta property="og:description"
        content="Rasakan pengalaman mewah armada Sutan Raya dengan tur virtual 360 derajat. Jelajahi interior kendaraan kami yang nyaman dan modern." />
    <meta property="og:image" content="https://i.pinimg.com/736x/d4/c0/2a/d4c02ab6ea1144040cd0cb1174f39b94.jpg" />
    <meta property="og:image" content="https://i.pinimg.com/736x/d4/c0/2a/d4c02ab6ea1144040cd0cb1174f39b94.jpg" />

    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/pannellum@2.5.6/build/pannellum.css" />
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/pannellum@2.5.6/build/pannellum.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/face-api.js@0.22.2/dist/face-api.min.js"></script>

    <style>
        :root {
            --sutan-dark: #121212;
            --sutan-gold: #d4af37;
        }

        body {
            background-color: var(--sutan-dark);
            color: white;
            font-family: "Plus Jakarta Sans", sans-serif;
        }

        #video-feed {
            position: absolute;
            top: 10px;
            left: 10px;
            width: 320px;
            height: 240px;
            border: 2px solid var(--sutan-gold);
            border-radius: 8px;
            opacity: 0.2;
            z-index: 100;
        }
    </style>
</head>

<body class="antialiased">
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect, useRef } = React; function Viewer360() {
            const viewerRef = useRef(null); const videoRef = useRef(null); const trackingInterval = useRef(null); const [isDesktop, setIsDesktop] = useState(window.innerWidth > 1024); const [modelsLoaded,
                setModelsLoaded] = useState(false); const [camStatus, setCamStatus] = useState("OFF"); useEffect(() => {
                    viewerRef.current = pannellum.viewer("panorama-container", {
                        type: "equirectangular", panorama: "image2.jpg", autoLoad: true, showControls:
                            true, compass: true,
                    }); const loadModels = async () => {
                        const MODEL_URL = "https://cdn.jsdelivr.net/npm/face-api.js@0.22.2/weights"; await faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL); await faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL);
                        setModelsLoaded(true);
                    }; if (isDesktop) { loadModels(); } return () => { if (trackingInterval.current) clearInterval(trackingInterval.current); viewerRef.current.destroy(); };
                }, [isDesktop]); const startFaceTracking = async () => {
                    if (!videoRef.current)
                        return; setCamStatus("STARTING"); try { const stream = await navigator.mediaDevices.getUserMedia({ video: {}, }); videoRef.current.srcObject = stream; videoRef.current.play(); setCamStatus("ON"); } catch (err) {
                            console.error("Error accessing
        camera: ", err); setCamStatus("ERROR"); } }; const handleVideoPlay = () => { trackingInterval.current = setInterval(async () => { if (!viewerRef.current || !videoRef.current) return; const detections = await faceapi.detectSingleFace(videoRef.current,
        new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks(); if (detections) {
                                const nose = detections.landmarks.getNose()[3]; const videoWidth = videoRef.current.width; const videoHeight = videoRef.current.height; const normalizedX = (nose.x -
                                    videoWidth / 2) / (videoWidth / 2); const normalizedY = (nose.y - videoHeight / 2) / (videoHeight / 2); const sensitivity = 45; const newYaw = -normalizedX * sensitivity; const newPitch = -normalizedY * sensitivity; viewerRef.current.setYaw(newYaw,
                                        false); viewerRef.current.setPitch(newPitch, false);
                            }
                        }, 100);
                }; const getButtonStatus = () => {
                    if (!modelsLoaded) return { text: "Memuat Model...", disabled: true }; switch (camStatus) {
                        case "OFF": return {
                            text: "Aktifkan Kontrol Wajah",
                            disabled: false
                        }; case "STARTING": return { text: "Membuka Kamera...", disabled: true }; case "ON": return { text: "Kontrol Wajah Aktif", disabled: true }; case "ERROR": return { text: "Kamera Error", disabled: true }; default: return {};
                    }
                };
            const buttonStatus = getButtonStatus(); return (
                <div className="min-h-screen flex flex-col items-center justify-center p-4">
                    {isDesktop && (
                        <video id="video-feed" ref={videoRef} onPlay={handleVideoPlay} muted playsInline></video>)}

                    <header className="text-center mb-8">
                        <img src="../image/logo.png" alt="Sutan Raya Logo" className="h-16 mx-auto mb-2" />
                        <h1 className="text-3xl font-bold text-[var(--sutan-gold)] tracking-wider">
                            Luxury Travel
                        </h1>
                        <p className="text-gray-400">Eksperimen Kontrol Wajah</p>
                    </header>

                    <div className="w-full max-w-5xl h-[60vh] rounded-lg shadow-2xl overflow-hidden border-2 border-[var(--sutan-gold)]">
                        <div id="panorama-container" className="h-full w-full"></div>
                    </div>

                    {isDesktop && (
                        <div className="mt-6 text-center">
                            <button onClick={startFaceTracking} disabled={buttonStatus.disabled} className={`font-bold py-2 px-6 rounded-lg shadow-lg transition-all duration-300 ${buttonStatus.disabled ? "bg-gray-600 text-gray-400 cursor-not-allowed" :
                                "bg-[var(--sutan-gold)] text-black hover:bg-yellow-300"}`}>
                                {buttonStatus.text}
                            </button>
                        </div>
                    )}

                    <footer className="text-center mt-8 text-gray-500 text-sm">
                        <p>&copy; 2025 PO. Sutan Raya. All rights reserved.</p>
                    </footer>
                </div>
            );
        } const container = document.getElementById("root"); const root = ReactDOM.createRoot(container); root.render(
            <Viewer360 />);
    </script>
</body>

</html>